// @ts-check
/* eslint-disable no-console */
import fs from 'fs/promises'
import path from 'path'

const defaultDetailsFileName = 'firebase-details.json'

const firebaseConfigFilePaths = [
  path.join(process.cwd(), 'backend/.firebaserc'),
  path.join(process.cwd(), 'frontend/.firebaserc'),
]

const generatedCodeWarning = `// This file was generated by the 'populate-firebase.js' script.
// Any changes made to this file may be overwritten.\n`

/** @type {FirebaseDetails} */
const firebaseAppDetailDefaults = {
  projectId: '<your-firebase-app-id>',
  firebaseConfig: {
    apiKey: '<your-api-key>',
    authDomain: '<your-project-id>.firebaseapp.com',
    projectId: '<your-project-id>',
    storageBucket: '<your-project-id>.appspot.com',
    messagingSenderId: '<your-sender-id>',
    appId: '<your-app-id>',
  },
  authProvider: {
    type: 'EmailAuthProvider',
  },
}

class Script {
  /**
   *
   * @param {string[]} args
   * @returns {ScriptOptions}
   */
  static getScriptOptionsFromArgs(args) {
    /** @type {ScriptOptions} */
    const options = {
      detailsFileName: defaultDetailsFileName,
      forceEnabled: false,
    }

    options.forceEnabled = args.includes('--force')
    if (options.forceEnabled)
      args = args.filter(arg => arg !== '--force')
    if (args.length > 0 && args[0])
      options.detailsFileName = args[0]

    return options
  }

  /**
   *
   * @param {string[]} args
   */
  static async main(args) {
    const options = Script.getScriptOptionsFromArgs(args)
    const detailsFilePath = path.join('shared', options.detailsFileName)

    console.log(`Reading firebase details from '${detailsFilePath}'...`)

    // load details json
    /** @type {FirebaseDetails} */
    const fbDetails = JSON.parse(await fs.readFile(detailsFilePath, 'utf-8'))

    if (!fbDetails.projectId)
      throw new Error('No projectId in firebase-details.json')

    for (const rcFilePath of firebaseConfigFilePaths)
      await FirebaseTools.populateValuesInFirebaseRc(rcFilePath, fbDetails, options)

    const appFilePath = path.join(process.cwd(), 'frontend/src/firebase/app.g.ts')
    FirebaseTools.updateAppTs(appFilePath, fbDetails, options)

    const authProviderFilePath = path.join(process.cwd(), 'frontend/src/firebase/auth-provider.g.ts')
    FirebaseTools.updateAuthProviderTs(authProviderFilePath, fbDetails, options)
  }
}

class FirebaseTools {
  /**
   * Shoves the firebase details into the .firebaserc file.
   * @param {string} rcFilePath The path to the .firebaserc file
   * @param {FirebaseDetails} fbDetails holds the details of the firebase project
   * @param {ScriptOptions} options
   */
  static async populateValuesInFirebaseRc(rcFilePath, fbDetails, options) {
    if (options.forceEnabled)
      console.log(`Force populating all firebase details in '${rcFilePath}'...`)

    else
      console.log(`Populating firebase details in '${rcFilePath}'...`)

    const rcDetails = JSON.parse(
      await fs.readFile(rcFilePath, 'utf-8'),
    )

    if (rcDetails.projects) {
      if (FirebaseTools.#shouldValueBeUpdated(rcDetails.projects.default, firebaseAppDetailDefaults.projectId, options))
        rcDetails.projects.default = fbDetails.projectId
    }
    else {
      // projects doesn't exist, so create it
      rcDetails.projects = {
        default: fbDetails.projectId,
      }
    }

    await fs.writeFile(
      rcFilePath,
      JSON.stringify(rcDetails, null, 2),
    )
  }

  /**
   * Determines if a value can be overwritten.
   * @param {any} currentValue The current value of the config property
   * @param {any} defaultValue The default value of the config property
   * @param {ScriptOptions} scriptOptions The options passed to the script
   * @returns {boolean}
   */
  static #shouldValueBeUpdated(currentValue, defaultValue, scriptOptions) {
    if (scriptOptions.forceEnabled)
      return true
    return currentValue === defaultValue
  }

  /**
   * Updates the firebase app typescript file with the firebase details.
   * @param {string} path The path to the .ts file to write to.
   * @param {FirebaseDetails} fbDetails holds the details of the firebase project
   * @param {ScriptOptions} options
   */
  static async updateAppTs(path, fbDetails, options) {
    console.log(`Updating app file in '${path}'...`)

    // Generate the typescript code and write it to the file
    const tsCode = FirebaseTools.#generateAppTs(fbDetails, options)
    await fs.writeFile(path, tsCode)
  }

  /**
   * Generates the typescript code for the app file.
   * @param {FirebaseDetails} fbDetails holds the details of the firebase project
   * @param {ScriptOptions} _options
   * @returns {string}
   */
  static #generateAppTs(fbDetails, _options) {
    return `${generatedCodeWarning}
import { initializeApp } from 'firebase/app'

export const app = initializeApp(${StringTools.jsonObjectToTs(fbDetails.firebaseConfig, '  ', 0)})\n`
  }

  /**
   * Updates the auth-provider typescript file with the firebase details.
   * @param {string} path The path to the .ts file to write to.
   * @param {FirebaseDetails} fbDetails holds the details of the firebase project
   * @param {ScriptOptions} options
   */
  static async updateAuthProviderTs(path, fbDetails, options) {
    console.log(`Updating auth provider in '${path}'...`)

    // Generate the typescript code and write it to the file
    const authProviderTs = FirebaseTools.#generateAuthProviderTs(fbDetails, options)
    await fs.writeFile(path, authProviderTs)
  }

  /**
   * Generates the typescript code for the auth provider file.
   * @param {FirebaseDetails} fbDetails holds the details of the firebase project
   * @param {ScriptOptions} options
   * @returns {string}
   */
  static #generateAuthProviderTs(fbDetails, options) {
    switch (fbDetails.authProvider.type) {
      case 'OAuthProvider':
      {
        let code = `${generatedCodeWarning}
import { OAuthProvider } from 'firebase/auth'

export const authProvider = new OAuthProvider('${fbDetails.authProvider.details.providerId}')\n`
        if (fbDetails.authProvider.details.customParameters)
          code += `authProvider.setCustomParameters(${StringTools.jsonObjectToTs(fbDetails.authProvider.details.customParameters)})\n`

        if (fbDetails.authProvider.details.scopes && fbDetails.authProvider.details.scopes.length) {
          const authProviderScopes = fbDetails.authProvider.details.scopes.map(scope => `authProvider.addScope('${scope}')`).join('\n')
          code += `${authProviderScopes}\n`
        }

        return code
      }
      case 'EmailAuthProvider':
      {
        const code = `${generatedCodeWarning}
import { EmailAuthProvider } from 'firebase/auth'

export const authProvider = new EmailAuthProvider()\n`
        return code
      }
      case null:
      case undefined:
        throw new Error(`No authProvider.type in the firebase-details json file: ${options.detailsFileName}`)
      default:
        throw new Error(`Unknown authProvider.type in the firebase-details json file: ${options.detailsFileName}`)
    }
  }
}

class StringTools {
  /**
   *
   * @param {any} jsonObject
   * @param {string} indent
   * @param {number} indent
   * @returns {string}
   */
  static jsonObjectToTs(jsonObject, indent = '  ', indentLevel = 0) {
    const properties = Object.entries(jsonObject).map(([key, value]) => `${indent.repeat(indentLevel + 1)}${key}: ${StringTools.#formatPropertyValue(value)}`).join(',\n')
    return `${indent.repeat(indentLevel)}{\n${properties},\n${indent.repeat(indentLevel)}}`
  }

  static #arrayToTs(array, indent, indentLevel) {
    const items = array.map(value => `${indent.repeat(indentLevel + 1)}${StringTools.#formatPropertyValue(value, indent, indentLevel + 1)}`).join(',\n')
    return `${indent.repeat(indentLevel)}[\n${items},\n${indent.repeat(indentLevel)}]`
  }

  /**
   *
   * @param {unknown} value
   * @returns {string}
   */
  static #formatPropertyValue(value, indent = '  ', indentLevel = 0) {
    switch (typeof value) {
      case 'string':
        return `'${value}'`
      case 'number':
        return value.toString()
      case 'boolean':
        return value ? 'true' : 'false'
      case 'object':
        if (value === null)
          return 'null'
        if (Array.isArray(value))
          return StringTools.#arrayToTs(value, indent, indentLevel + 1)
        return StringTools.jsonObjectToTs(value, indent, indentLevel + 1)
      default:
        throw new Error(`Unknown type: ${typeof value}`)
    }
  }
}

Script.main(process.argv.slice(2))

/**
 * @typedef {Object} ScriptOptions
 * @property {string} detailsFileName The file name of the file containing the firebase details
 * @property {boolean} forceEnabled Indicates if the values should be populated in the .firebaserc file even if non-default values are present
 */

/**
 * @typedef {Object} FirebaseDetails
 * @property {string} projectId The id of the firebase project
 * @property {import('firebase/app').FirebaseOptions} firebaseConfig The firebase app info
 * @property {AuthProvider} authProvider Contains the details of the auth provider
 */

/**
 * @typedef {Object} OAuthProviderDetails
 * @property {string} providerId Provider for which credentials should be generated.
 * @property {string[]} [scopes] The scopes to request.
 * @property {Record<string,string>} customParameters the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in operations.
 */

/**
 * @typedef {Object} AuthProviderOAuth
 * @property {"OAuthProvider"} type The type of auth provider
 * @property {OAuthProviderDetails} details The details of the OAuthProvider
 */

/**
 * @typedef {Object} AuthProviderEmail
 * @property {"EmailAuthProvider"} type The type of auth provider
 */

/**
 * @typedef {AuthProviderOAuth | AuthProviderEmail} AuthProvider Contains information on the type of auth provider and the details of the auth provider used.
 */

